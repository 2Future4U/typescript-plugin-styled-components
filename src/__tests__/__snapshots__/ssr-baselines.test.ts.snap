// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`multiple-components.tsx 1`] = `

File: multiple-components.tsx
Source code:

  import styled from 'styled-components';
  
  export function createButtons() {
      const A = styled.button\` color: red; \`;
      const B = styled(A)\` color: blue; \`;
  
      return { A, B };
  }
  
  export function createDivs() {
      const A = styled.div\` color: green; \`;
      const B = styled(A)\` color: yellow; \`;
  
      return { A, B };
  }
  

TypeScript before transform:

  import styled from "styled-components";
  export function createButtons() {
      const A = styled.button \` color: red; \`;
      const B = styled(A) \` color: blue; \`;
      return { A, B };
  }
  export function createDivs() {
      const A = styled.div \` color: green; \`;
      const B = styled(A) \` color: yellow; \`;
      return { A, B };
  }
  

TypeScript after transform:

  import styled from 'styled-components';
  export function createButtons() {
      const A = styled.button.withConfig({ displayName: "A", componentId: "ssr-12flnm5" }) \` color: red; \`;
      const B = styled(A).withConfig({ displayName: "B", componentId: "ssr-1nka2f9" }) \` color: blue; \`;
      return { A, B };
  }
  export function createDivs() {
      const A = styled.div.withConfig({ displayName: "A", componentId: "ssr-12flnm5" }) \` color: green; \`;
      const B = styled(A).withConfig({ displayName: "B", componentId: "ssr-1nka2f9" }) \` color: yellow; \`;
      return { A, B };
  }
  


`;

exports[`sample1.ts 1`] = `

File: sample1.ts
Source code:

  import styled from 'styled-components';
  
  const Button = styled.button\`
    color: red;
  \`;
  
  declare const nonStyled: any;
  
  const NonButton = nonStyled.button\`
    yo
  \`;
  
  const OtherButton = styled(Button)\`
    color: blue;
  \`;
  
  const SuperButton = Button.extend\`
    color: super;
  \`;
  
  export default styled.link\`
    color: black;
  \`;
  
  export const SmallButton = Button.extend\`
    font-size: .7em;
  \`;
  
  const MiniButton = styled(SmallButton).attrs({ size: 'mini' })\`
    font-size: .1em;
  \`;
  

TypeScript before transform:

  import styled from "styled-components";
  const Button = styled.button \`\\n  color: red;\\n\`;
  declare const nonStyled: any;
  const NonButton = nonStyled.button \`\\n  yo\\n\`;
  const OtherButton = styled(Button) \`\\n  color: blue;\\n\`;
  const SuperButton = Button.extend \`\\n  color: super;\\n\`;
  export default styled.link \`\\n  color: black;\\n\`;
  export const SmallButton = Button.extend \`\\n  font-size: .7em;\\n\`;
  const MiniButton = styled(SmallButton).attrs({ size: "mini" }) \`\\n  font-size: .1em;\\n\`;
  

TypeScript after transform:

  import styled from 'styled-components';
  const Button = styled.button.withConfig({ displayName: "Button", componentId: "ssr-mm3di7" }) \`
    color: red;
  \`;
  declare const nonStyled: any;
  const NonButton = nonStyled.button \`
    yo
  \`;
  const OtherButton = styled(Button).withConfig({ displayName: "OtherButton", componentId: "ssr-j426hc" }) \`
    color: blue;
  \`;
  const SuperButton = Button.extend.withConfig({ displayName: "SuperButton", componentId: "ssr-w8sv2y" }) \`
    color: super;
  \`;
  export default styled.link \`
    color: black;
  \`;
  export const SmallButton = Button.extend.withConfig({ displayName: "SmallButton", componentId: "ssr-f57us" }) \`
    font-size: .7em;
  \`;
  const MiniButton = styled(SmallButton).attrs({ size: "mini" }).withConfig({ displayName: "MiniButton", componentId: "ssr-feuq4j" }) \`
    font-size: .1em;
  \`;
  


`;

exports[`sample2.ts 1`] = `

File: sample2.ts
Source code:

  import styled from 'styled-components';
  
  const styled2 = styled;
  const NonButton = styled.button;
  const NonStyled = styled\`  color: red; \`;
  const Link = styled(NonStyled)\` color: red; \`;
  

TypeScript before transform:

  import styled from "styled-components";
  const styled2 = styled;
  const NonButton = styled.button;
  const NonStyled = styled \`  color: red; \`;
  const Link = styled(NonStyled) \` color: red; \`;
  

TypeScript after transform:

  import styled from 'styled-components';
  const styled2 = styled;
  const NonButton = styled.button;
  const NonStyled = styled \`  color: red; \`;
  const Link = styled(NonStyled).withConfig({ displayName: "Link", componentId: "ssr-1bdnxv3" }) \` color: red; \`;
  


`;

exports[`sample3.tsx 1`] = `

File: sample3.tsx
Source code:

  import * as React from 'react';
  import styled from '../themed-styled';
  import { SmallButton } from './sample1';
  
  interface LabelProps {
      size: number;
  }
  
  const CustomLabel = styled.label\`
      font-size: \${(props: LabelProps) => props.size + 'px'}
  \`;
  
  const LabeledLink = () => <SmallButton />;
  
  export default CustomLabel;
  

TypeScript before transform:

  import * as React from "react";
  import styled from "../themed-styled";
  import { SmallButton } from "./sample1";
  interface LabelProps {
      size: number;
  }
  const CustomLabel = styled.label \`\\n    font-size: \${(props: LabelProps) => props.size + "px"}\\n\`;
  const LabeledLink = () => <SmallButton />;
  export default CustomLabel;
  

TypeScript after transform:

  import * as React from 'react';
  import styled from '../themed-styled';
  import { SmallButton } from './sample1';
  interface LabelProps {
      size: number;
  }
  const CustomLabel = styled.label.withConfig({ displayName: "CustomLabel", componentId: "ssr-vgngw" }) \`
      font-size: \${(props: LabelProps) => props.size + 'px'}
  \`;
  const LabeledLink = () => <SmallButton />;
  export default CustomLabel;
  


`;
